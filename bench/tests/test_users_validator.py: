# bench/tests/test_users_validator.py
from __future__ import annotations

import json
from pathlib import Path
import pytest

from bench.users_validator import load_valid_users


def _read_log(p: Path) -> str:
    return p.read_text(encoding="utf-8") if p.exists() else ""


def test_valid_users_ok(tmp_path: Path):
    users_path = tmp_path / "users.json"
    log_path = tmp_path / "errors.log"

    payload = [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob", "email": "bob@example.com"},
    ]
    users_path.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")

    res = load_valid_users(users_path, log_path=log_path)
    assert len(res) == 2
    assert res[0]["name"] == "Alice"
    assert _read_log(log_path) == ""


def test_missing_field_logged(tmp_path: Path):
    users_path = tmp_path / "users.json"
    log_path = tmp_path / "errors.log"

    payload = [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob"},  # нет email
    ]
    users_path.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")

    res = load_valid_users(users_path, log_path=log_path)
    assert len(res) == 1
    log = _read_log(log_path)
    assert "missing field 'email'" in log


def test_wrong_type_logged(tmp_path: Path):
    users_path = tmp_path / "users.json"
    log_path = tmp_path / "errors.log"

    payload = [
        {"id": "1", "name": "Alice", "email": "alice@example.com"},  # id строка
    ]
    users_path.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")

    res = load_valid_users(users_path, log_path=log_path)
    assert res == []
    log = _read_log(log_path)
    assert "field 'id' has wrong type" in log


def test_malformed_json_logged(tmp_path: Path):
    users_path = tmp_path / "users.json"
    log_path = tmp_path / "errors.log"

    users_path.write_text("{ not-a-json }", encoding="utf-8")

    res = load_valid_users(users_path, log_path=log_path)
    assert res == []
    log = _read_log(log_path)
    assert "invalid json" in log


def test_root_not_list(tmp_path: Path):
    users_path = tmp_path / "users.json"
    log_path = tmp_path / "errors.log"

    payload = {"id": 1, "name": "Alice", "email": "alice@example.com"}  # корень — объект
    users_path.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")

    res = load_valid_users(users_path, log_path=log_path)
    assert res == []
    log = _read_log(log_path)
    assert "root json must be a list" in log
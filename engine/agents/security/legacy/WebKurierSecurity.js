// engine/agents/security/adapter.js
// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–æ–¥—É–ª—è WebKurierSecurity

const fs = require('fs');
const path = require('path');
const WebKurierSecurity = require('./legacy/WebKurierSecurity.js');

const quarantineDir = path.join(__dirname, '.quarantine');
const reportsDir = path.join(__dirname, '.reports');

// —Å–æ–∑–¥–∞—ë–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç
if (!fs.existsSync(quarantineDir)) fs.mkdirSync(quarantineDir, { recursive: true });
if (!fs.existsSync(reportsDir)) fs.mkdirSync(reportsDir, { recursive: true });

const security = new WebKurierSecurity();

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –ø–∞–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
function scanFolder(folderPath) {
  const files = fs.readdirSync(folderPath);
  for (const file of files) {
    const fullPath = path.join(folderPath, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      scanFolder(fullPath);
    } else {
      try {
        const content = fs.readFileSync(fullPath, 'utf-8');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–≥—Ä–æ–∑—ã –∏ —Å–µ–∫—Ä–µ—Ç—ã
        security.detectThreats(content);
        security.protectTokens(content);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
        security.scanUploadedFile({ name: file, content });
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fullPath}:`, err.message);
      }
    }
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
 */
function saveReport() {
  const reportText = security.generateReport();
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reportPathTxt = path.join(reportsDir, `report-${timestamp}.txt`);
  fs.writeFileSync(reportPathTxt, reportText, 'utf-8');
  console.log(`‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPathTxt}`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è CLI-–ª–æ–≥–∏–∫–∞
 */
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'scan':
    const target = args[1] || path.join(__dirname, '../../..'); // –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É: ${target}`);
    scanFolder(target);
    saveReport();
    break;

  case 'quarantine':
    if (!args[1]) {
      console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞');
      process.exit(1);
    }
    const filePath = args[1];
    if (fs.existsSync(filePath)) {
      const fileName = path.basename(filePath);
      const destPath = path.join(quarantineDir, fileName);
      fs.renameSync(filePath, destPath);
      security.quarantine(fileName, '–§–∞–π–ª –≤—Ä—É—á–Ω—É—é –ø–æ–º–µ—â—ë–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω');
      saveReport();
      console.log(`‚ö†Ô∏è –§–∞–π–ª ${fileName} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω`);
    } else {
      console.error(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    break;

  case 'report':
    saveReport();
    break;

  default:
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node adapter.js scan [–ø–∞–ø–∫–∞]   - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    console.log('  node adapter.js quarantine [—Ñ–∞–π–ª] - –≤—Ä—É—á–Ω—É—é –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω');
    console.log('  node adapter.js report         - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç');
    break;
}